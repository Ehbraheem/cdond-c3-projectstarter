version: 2.1

commands:
  notification:
    description: Send a notification to slack
    parameters:
      channel:
        type: string
        default: "03-cloud-devops-eng"
      event:
        type: string
        default: fail
      template:
        type: string
        default: basic_fail_1
      mentions:
        type: string
        default: "<@U04D8Q1USHX>, <@U04D9FDB2Q3>"
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: << parameters.event >>
          template: << parameters.template >>
          mentions: << parameters.mentions >>

  terminate_job:
    description: Terminate the current job.
    steps:
      - run:
          name: Terminate job
          when: on_fail
          command: |
            exit 1
      - notification

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
      environment:
        type: string
        default: dev
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environments"

            # aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.environment >>-<< parameters.workflow_id >>"
            # aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.environment >>-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"

            BUCKET_NAME="udapeople-<< parameters.workflow_id >>"

            aws s3 rm "s3://${BUCKET_NAME}" --recursive
            aws s3api delete-bucket --bucket $BUCKET_NAME
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
      - notification

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            echo "Reverting migrations"
            # Example: Memstash.io
            # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            # Example: kvdb.io
            MIGRATION_ID="migration_<< parameters.workflow_id >>"
            echo $MIGRATION_ID
            SUCCESS=$(curl --insecure --request GET  "https://kvdb.io/Af7hn2aPN5kPEE9mtuorgH/${MIGRATION_ID}")
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
            #  Add revert code here. You can find this in the Getting Started section.
              cd ~/project/backend
              npm run ci
              npm run migrations:revert
            fi
orbs:
  slack: circleci/slack@4.9.3

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run ci
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run ci
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package-lock.json" }}
      # - notification:
      #     event: pass
      #     template: basic_success_1
      #     mentions: "<@U04D8Q1USHX>, <@U04D9FDB2Q3>"

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.14.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run ci
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.14.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      # Your job code here
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run ci
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.14.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      # Your job code here
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm run ci
            npm run audit
      - terminate_job

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.14.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      # Your job code here
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm run ci
            npm run audit
      - terminate_job

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints:
           - "1d:a8:c1:5e:a1:fa:b8:88:e4:62:3d:e1:de:38:4e:3d"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run: # This is just to show the version of Ansible. Ansible is already installed in the image
          name: Install dependencies
          command: |
            ansible --version
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.14.0
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm run ci
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io OR memstash.io
          command: |
            # Your code here
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "Af7hn2aPN5kPEE9mtuorgH" in your local terminal first
                curl https://kvdb.io/Af7hn2aPN5kPEE9mtuorgH/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm run ci
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                                  --region us-east-1 \
                                  --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicDns`].OutputValue' \
                                  --output text \
              )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            export NODE_OPTIONS=--openssl-legacy-provider

            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints:
           - "1d:a8:c1:5e:a1:fa:b8:88:e4:62:3d:e1:de:38:4e:3d"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd backend
            npm run ci
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm run build
            # NODE_ENV=production npm install --production

            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                                  --region us-east-1 \
                                  --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIp`].OutputValue' \
                                  --output text \
              )
            echo "BACKEND_IP = ${BACKEND_IP}"
            # Save the IP address to a file
            echo "${BACKEND_IP}" > backend_ip.txt
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(cat backend_ip.txt)
            echo "BACKEND_IP = ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                echo "Backend smoke test passed"
            else
                echo "Backend smoke test failed" && exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                echo "Frontend smoke test passed" && exit 1
            else
                echo "Frontend smoke test failed" && exit 1
            fi
      # Here's where you will add some code to rollback on failure
      # - destroy-environment
      # - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            aws --version
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - 'feature/*'
                - feature/cicd
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

# VS Code Extension Version: 1.4.0
